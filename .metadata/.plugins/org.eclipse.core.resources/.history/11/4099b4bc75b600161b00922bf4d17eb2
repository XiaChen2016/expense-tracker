package com.tracker.services;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.tracker.domain.project.Project;
import com.tracker.domain.receipt.Item;
import com.tracker.domain.receipt.Receipt;
import com.tracker.repositories.receipts.MongoReceiptRepository;

@Service
public class ReceiptsService {
	@Autowired
	private MongoReceiptRepository receiptRepository;

	@Autowired
	private ProjectsService projectService;
	
	public Page<Receipt> findByOwnerId( String id, Pageable pageable ) {
		Direction direction = Direction.DESC;
		Query query = new Query().with(new Sort( direction,"time"));
		return receiptRepository.findByOwnerId( id, pageable, query );
	}
	
	public Receipt findOne( String id ) {
		return receiptRepository.findOne(id);
	}
	public Page<Receipt> searchReceipt( String id, String place, String project, String total, String category, Pageable pageable ) {
		
		return receiptRepository
//					.findByPlaceContainingAndTotalContainingAndCategoryContaining( place, total, category, pageable );
//				.findByOwnerIdAndPlaceContainingAndCategoryContaining( id, place,category, pageable );
				.findByOwnerIdAndCategoryContaining( id,category, pageable );
	}
	
	public boolean save( Receipt receipt ) {
		receiptRepository.save( receipt );
		return true;
	}
	
	public boolean update( Receipt receipt ) {
		receiptRepository.update(receipt);
		return true;
	}
	
	public void delete( String id ){
//		receiptRepository.delete(id);
		receiptRepository.deleteAll();
	}
	
	
	
//	@PostConstruct
	public void initDatabase( String uid ) throws ParseException {
		System.out.println( "Creating receipts for user with id: " + uid );
		/* For each user, create 30 receipts for him. */

		String[] notes = { "Note 1", "Note 2", "Note 3", "Note 4", "Note 5"};
		String[] itemNames = {  "chips", "pepsi", "apple", "pears","avocado",
								"laptop" ,"iphone", "earphone", "Xbox", "calculator",
								"backpack","dress","skirt","glasses", "boots",
								"lamp","sofa", "plates", "salad spinner","pillow"};
		String[] catagoryNames = { "Grocery", "Electronic Devices", "Clothing", "Home" };
		String[] projectNames = { "Thanksgiving", "Christmas", "Octoberfast", "Halloween" };
		String[] places = { "Kwik Trip", "Mall of America", "Outlets", "Airport", "Macy's" ,"JCPenny" };
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		
		for( int i = 0; i < 30; i++ ) {
			Receipt r = new Receipt();
			r.setNote( notes[ (int) ( Math.random() * 5 ) ] );
			r.setPlace( places[ (int) ( Math.random() * 6 ) ] );
			Date date =  sdf.parse( "20" + (int) ( Math.random() * 6 ) +"-" + (int) ( Math.random() * 12 )
										+"-" + (int) ( Math.random() * 30 ) + " "
										+ (int) ( Math.random() * 24 ) +":"+ (int) ( Math.random() * 60 ) 
										+ ":" +(int) ( Math.random() * 60 ) );
			r.setTime( date );
			r.setOwnerId( uid );
			String[] catagory = new String[2];
			int random =  (int) ( Math.random() * 4);
			catagory[0] = catagoryNames[ random ] ;
			catagory[1] = catagoryNames[ (random + 1) % 4 ] ;
			r.setCategory( catagory );
			
			int total = 0;
			/* Create five items with every receipt. */
			List< Item > list_of_items = new ArrayList<Item>();
			for( int j = 0; j<5; j++ ) {
				int price = (int) ( Math.random() * 600 );
				total += price;
				Item item = new Item();
				item.setName( itemNames[  (int) ( Math.random() * 6 )] );
				item.setPrice( price);
				item.setQuantity( 1 );
				list_of_items.add( item );
			}
			r.setTotal(total);
			
			/* Assign project to a receipt */
			String project = projectNames[ (int) ( Math.random() * 4) ];
			Project p = projectService.findByOwnerIdAndName( uid, project );
			if( p!= null ) {
				r.setProjectId( p.getId() );
			} else {
				p = new Project();
				p.setName( project );
				p.setOwnerId( uid );
				projectService.save( p );
				p = projectService.findByOwnerIdAndName( uid, project );
				r.setProjectId( p.getId() );
			}
			
			save( r );
		}
	}
}
